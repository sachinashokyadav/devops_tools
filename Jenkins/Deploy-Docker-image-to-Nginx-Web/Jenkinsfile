pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_REPO', defaultValue: 'https://github.com/sachinashokyadav/devops_tools.git', description: 'GitHub repository URL')
        string(name: 'GITHUB_BRANCH', defaultValue: 'main', description: 'Branch to deploy from')
        string(name: 'EC2_USER', defaultValue: 'ubuntu', description: 'EC2 username (ubuntu/ec2-user)')
        string(name: 'EC2_HOST', defaultValue: '<EC2-PUBLIC-IP>', description: 'EC2 Public IP or DNS')
        string(name: 'EC2_SSH_KEY', defaultValue: 'ec2-ssh-key', description: 'Jenkins Credential ID for EC2 private key')
    }

    stages {
        stage('Deploy to EC2') {
            steps {
                sshagent([params.EC2_SSH_KEY]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${params.EC2_USER}@${params.EC2_HOST} '
                            # Update packages
                            sudo apt update -y

                            # Ensure Docker is running
                            sudo systemctl enable docker || true
                            sudo systemctl start docker || true

                            # Clone/Update repo
                            if [ ! -d ~/website ]; then
                                git clone -b ${params.GITHUB_BRANCH} ${params.GITHUB_REPO} ~/website
                            else
                                cd ~/website && git fetch && git checkout ${params.GITHUB_BRANCH} && git pull
                            fi

                            cd ~/website/Jenkins/Deploy-Docker-image-to-Nginx-Web/Notes-Taking-Website

                            # Build docker image
                            sudo docker build -t notes-website:latest .

                            # Stop & remove old container
                            sudo docker stop notes-website || true
                            sudo docker rm notes-website || true

                            # Run container on port 80
                            sudo docker run -d --name notes-website -p 80:80 notes-website:latest
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "üöÄ Website deployed successfully! Access it at http://${params.EC2_HOST}"
        }
        failure {
            echo "‚ùå Deployment failed. Check Jenkins logs."
        }
    }
}
