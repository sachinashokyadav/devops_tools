pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-cred')  // Docker Hub credentials ID in Jenkins
        DOCKER_IMAGE = "sachinashokyadav/notes-website"          // Replace with your repo name
        DEPLOY_SERVER = "ec2-user@<EC2-PUBLIC-IP>"               // Replace with EC2 user + public IP
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/devops_tools.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ./Jenkins/Deploy-Docker-image-to-Nginx-Web/Notes-Taking-Website"
                }
            }
        }

        stage('Login & Push to Docker Hub') {
            steps {
                script {
                    sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    sshagent(['ec2-ssh-key']) { // Jenkins credentials ID for EC2 private key
                        sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} '
                            # Install Docker if not present
                            if ! command -v docker &> /dev/null
                            then
                                sudo apt update -y
                                sudo apt install -y docker.io
                                sudo systemctl enable docker
                                sudo systemctl start docker
                            fi

                            # Login to Docker Hub
                            echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin

                            # Stop and remove old container if running
                            docker stop notes-website || true
                            docker rm notes-website || true

                            # Pull new image and run
                            docker pull ${DOCKER_IMAGE}:${BUILD_NUMBER}
                            docker run -d --name notes-website -p 80:80 ${DOCKER_IMAGE}:${BUILD_NUMBER}
                        '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üöÄ Deployment successful! Access your website at http://${DEPLOY_SERVER}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs."
        }
    }
}
