pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-cred')
        IMAGE_NAME = "sachinashokyadav/food-delivery-web"
        COMMIT_SHA = "${env.GIT_COMMIT.take(7)}"
    }

    stages {

        stage('Checkout') {
    steps {
        echo "SCM checkout already handled by Jenkins"
    }
}

        stage('Security Scans') {
            parallel {
                stage('Code Security Scan') {
                    steps {
                        echo "üîç Running code security scan with Dockerized Trivy..."
                        sh '''
                        docker run --rm -v $PWD:/app -w /app aquasec/trivy:latest \
                        fs --exit-code 1 --severity HIGH,CRITICAL \
                        --format table --output code-scan-report.txt .
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'code-scan-report.txt', fingerprint: true
                        }
                    }
                }

                stage('Docker Image Security Scan') {
                    steps {
                        echo "üîç Building Docker image..."
                        sh 'docker build --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:${BUILD_NUMBER} .'

                        echo "üîç Running Docker image security scan with Trivy..."
                        sh '''
                        docker run --rm aquasec/trivy:latest \
                        image --exit-code 1 --severity HIGH,CRITICAL \
                        --format table --output image-scan-report.txt $IMAGE_NAME:${BUILD_NUMBER}
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'image-scan-report.txt', fingerprint: true
                        }
                    }
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    sh 'echo $PSW | docker login -u $USR --password-stdin'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "üöÄ Pushing Docker images..."
                sh '''
                docker tag $IMAGE_NAME:${BUILD_NUMBER} $IMAGE_NAME:${COMMIT_SHA}
                docker push $IMAGE_NAME:${COMMIT_SHA}
                docker tag $IMAGE_NAME:${BUILD_NUMBER} $IMAGE_NAME:latest
                docker push $IMAGE_NAME:latest
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully!"
            // Add Slack/Teams/Email notifications here
        }
        failure {
            echo "‚ùå Pipeline failed! Check logs and reports."
        }
        always {
            echo "üßπ Cleaning up workspace..."
            cleanWs()
        }
    }
}
